#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TASKS 10
#define MAX_TASK_LEN 100


typedef struct {
    char task[MAX_TASK_LEN];
} Task;


Task tasks[MAX_TASKS];
int taskCount = 0;

void addTask();
void viewTasks();
void removeTask();
void displayMenu();

int main() {
    int choice;
    
    while (1) {
        displayMenu();
        printf("Enter your choice: ");
        scanf("%d", &choice);
        getchar();  // To consume the newline character after the number input
        
        switch (choice) {
            case 1:
                addTask();
                break;
            case 2:
                viewTasks();
                break;
            case 3:
                removeTask();
                break;
            case 4:
                printf("Exiting the program.\n");
                return 0;
            default:
                printf("Invalid choice, please try again.\n");
        }
    }
    
    return 0;
}


void displayMenu() {
    printf("\n------ To-Do List Menu ------\n");
    printf("1. Add a task\n");
    printf("2. View all tasks\n");
    printf("3. Remove a task\n");
    printf("4. Exit\n");
    printf("----------------------------\n");
}


void addTask() {
    if (taskCount >= MAX_TASKS) {
        printf("Task list is full. Cannot add more tasks.\n");
        return;
    }
    
    printf("Enter the task description: ");
    fgets(tasks[taskCount].task, MAX_TASK_LEN, stdin);
    
    
    tasks[taskCount].task[strcspn(tasks[taskCount].task, "\n")] = '\0';
    
    taskCount++;
    printf("Task added successfully!\n");
}


void viewTasks() {
    if (taskCount == 0) {
        printf("No tasks available.\n");
        return;
    }
    
    printf("\n------ Task List ------\n");
    for (int i = 0; i < taskCount; i++) {
        printf("%d. %s\n", i + 1, tasks[i].task);
    }
    printf("-----------------------\n");
}


void removeTask() {
    if (taskCount == 0) {
        printf("No tasks to remove.\n");
        return;
    }
    
    int taskNumber;
    printf("Enter the task number to remove: ");
    scanf("%d", &taskNumber);
    getchar();  // To consume the newline character after the number input
    
    if (taskNumber < 1 || taskNumber > taskCount) {
        printf("Invalid task number.\n");
        return;
    }
    
    // Shift tasks down to fill the gap
    for (int i = taskNumber - 1; i < taskCount - 1; i++) {
        strcpy(tasks[i].task, tasks[i + 1].task);
    }
    
    taskCount--;
    printf("Task removed successfully!\n");
}
